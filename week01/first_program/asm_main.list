     1                                  ;
     2                                  
     3                                  ; file: asm_main.asm
     4                                  
     5                                  
     6                                  
     7                                  %include "asm_io.inc"
     8                              <1> 	extern  read_int, print_int, print_string
     9                              <1> 	extern	read_char, print_char, print_nl
    10                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    11                              <1> 
    12                              <1> %macro 	dump_regs 1
    13                              <1> 	push	  dword %1
    14                              <1> 	call	  sub_dump_regs
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ;
    19                              <1> ; usage: dump_mem label, start-address, # paragraphs
    20                              <1> %macro  dump_mem 3
    21                              <1> 	push	 dword %1
    22                              <1> 	push	 dword %2
    23                              <1> 	push	 dword %3
    24                              <1> 	call	 sub_dump_mem
    25                              <1> %endmacro
    26                              <1> 
    27                              <1> %macro	dump_math 1
    28                              <1> 	push	 dword %1
    29                              <1> 	call	 sub_dump_math
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  dump_stack 3
    33                              <1> 	push	 dword %3
    34                              <1>         push     dword %2
    35                              <1> 	push	 dword %1
    36                              <1>         call     sub_dump_stack
    37                              <1> %endmacro
    38                                  
    39                                  ;
    40                                  
    41                                  ; initialized data is put in the .data segment
    42                                  
    43                                  ;
    44                                  
    45                                  section .data
    46                                  
    47 00000000 48656C6C6F20436C61-             hello: db 'Hello Class!', 10
    48 00000009 7373210A           
    49                                  
    50                                          helloLen: equ $-hello
    51                                  
    52                                          syswrite: equ 4
    53                                  
    54                                          stdout: equ 1
    55                                  
    56                                          exit: equ 1
    57                                  
    58                                          SUCCESS: equ 0
    59                                  
    60                                          kernelcall: equ 80h
    61                                  
    62                                  
    63                                  
    64                                  
    65                                  
    66                                  ; uninitialized data is put in the .bss segment
    67                                  
    68                                  ;
    69                                  
    70                                  segment .bss
    71                                  
    72                                  
    73                                  
    74                                  ;
    75                                  
    76                                  ; code is put in the .text segment
    77                                  
    78                                  ;
    79                                  
    80                                  segment .text
    81                                  
    82                                          global  asm_main
    83                                  
    84                                  asm_main:
    85                                  
    86 00000000 C8000000                        enter   0,0               ; setup routine
    87                                  
    88 00000004 60                              pusha
    89                                  
    90 00000005 B804000000                      mov eax,syswrite        ; 4 is the vector for the syswrite function
    91                                  
    92 0000000A BB01000000                      mov ebx,stdout          ; standard output, 1 is for stdout
    93                                  
    94 0000000F B9[00000000]                    mov ecx,hello           ; the address of the string
    95                                  
    96 00000014 BA0D000000                      mov edx,helloLen        ; size of the string (number of characters)
    97                                  
    98 00000019 CD80                            int kernelcall          ; call the interrupt to execute the syswrite function
    99                                  
   100                                  ; next print out result message as series of steps
   101                                  
   102                                  
   103                                  
   104 0000001B 61                              popa
   105                                  
   106 0000001C B800000000                      mov     eax, SUCCESS    ; return back to C
   107                                  
   108 00000021 C9                              leave
   109                                  
   110 00000022 C3                              ret
