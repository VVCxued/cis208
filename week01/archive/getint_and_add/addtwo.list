     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  %include "util.inc"
    33                              <1> global exit_program
    34                              <1> 
    35                              <1> exit_program:
    36 00000000 B801000000          <1>         mov eax,1
    37 00000005 BB00000000          <1>         mov ebx,0
    38 0000000A CD80                <1>         int 80H
    39                              <1> 
    40                                  
    41                                  segment .data
    42                                  
    43 00000000 546865206E756D6265-     message1: db "The number is entered",0
    44 00000009 7220697320656E7465-
    45 00000012 72656400           
    46 00000016 303132333435363738-     placeholder1: db "0123456789",0
    47 0000001F 3900               
    48 00000021 456E74657220746865-     prompt1: db "Enter the number:",0
    49 0000002A 206E756D6265723A00 
    50                                  
    51                                  segment .bss
    52                                  
    53 00000000 <res 00000004>          input1  resd 1
    54                                  
    55                                  segment .text
    56                                  	global main
    57                                  
    58                                  main:
    59 0000000C 90                      	nop
    60 0000000D BB[00000000]                    mov     ebx, input1       ; store address of input1 into ebx
    61 00000012 B9[20000000]                    mov     ecx, ret1         ; store return address into ecx
    62                                  	dump_regs 1
    63 00000017 6A01                <1>  push dword %1
    64 00000019 E8(00000000)        <1>  call sub_dump_regs
    65 0000001E EB2A                            jmp     short get_int     ; read integer
    66                                  ret1:
    67 00000020 B8[00000000]                    mov     eax, message1     ; get the message into eax
    68 00000025 E8(00000000)            	call 	print_string
    69 0000002A E8(00000000)            	call 	print_nl
    70 0000002F A1[00000000]                    mov     eax, [input1]     ; eax += dword at input2
    71 00000034 E8(00000000)                    call    print_int         ; print out input1
    72 00000039 E8(00000000)            	call 	print_nl
    73                                  	call	dump_regs 5
    74                              <1>  call :
    75 0000003E 6A05                <1>  push dword %1
    76 00000040 E8(00000000)        <1>  call sub_dump_regs
    77 00000045 E8B6FFFFFF              	call 	exit_program      ; exit the program
    78                                  
    79                                  	
    80                                  ; subprogram get_int
    81                                  ; Parameters:
    82                                  ;   ebx - address of dword to store integer into
    83                                  ;   ecx - address of instruction to return to
    84                                  ; Notes:
    85                                  ;   value of eax is destroyed
    86                                  get_int:
    87                                  	dump_regs 2
    88 0000004A 6A02                <1>  push dword %1
    89 0000004C E8(00000000)        <1>  call sub_dump_regs
    90 00000051 B8[21000000]                    mov     eax, prompt1      ; print out prompt
    91                                  	dump_regs 3
    92 00000056 6A03                <1>  push dword %1
    93 00000058 E8(00000000)        <1>  call sub_dump_regs
    94 0000005D E8(00000000)            	call print_string
    95 00000062 E8(00000000)                    call    read_int
    96                                  	dump_regs 4
    97 00000067 6A04                <1>  push dword %1
    98 00000069 E8(00000000)        <1>  call sub_dump_regs
    99 0000006E 8903                            mov     [ebx], eax         ; store input into memory
   100 00000070 FFE1                            jmp     ecx                ; jump back to caller
