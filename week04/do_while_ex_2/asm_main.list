     1                                  ; file: asm_main.asm
     2                                  ;
     3                                  ; An assembly program that asks the user to enter an integer that is greater than 0. 
     4                                  ; The function will keep on asking the user for the number until it is valid. 
     5                                  ; 
     6                                  
     7                                  %include "asm_io.inc"
     8                              <1> 	extern  read_int, print_int, print_string,print_hex
     9                              <1> 	extern	read_char, print_char, print_nl
    10                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    11                              <1> 
    12                              <1> %macro 	dump_regs 1
    13                              <1> 	push	  dword %1
    14                              <1> 	call	  sub_dump_regs
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ;
    19                              <1> ; usage: dump_mem label, start-address, # paragraphs
    20                              <1> %macro  dump_mem 3
    21                              <1> 	push	 dword %1
    22                              <1> 	push	 dword %2
    23                              <1> 	push	 dword %3
    24                              <1> 	call	 sub_dump_mem
    25                              <1> %endmacro
    26                              <1> 
    27                              <1> %macro	dump_math 1
    28                              <1> 	push	 dword %1
    29                              <1> 	call	 sub_dump_math
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  dump_stack 3
    33                              <1> 	push	 dword %3
    34                              <1>         push     dword %2
    35                              <1> 	push	 dword %1
    36                              <1>         call     sub_dump_stack
    37                              <1> %endmacro
    38                                  
    39                                  segment .data
    40                                  ;
    41                                  ; Output strings
    42                                  ;
    43 00000000 456E74657220616E20-     prompt_string db    "Enter an 'y' or 'Y' to continue:", 0
    44 00000009 277927206F72202759-
    45 00000012 2720746F20636F6E74-
    46 0000001B 696E75653A00       
    47                                  
    48                                  segment .bss
    49 00000000 <res 00000001>          input   resb 1
    50                                  
    51                                  
    52                                  segment .text
    53                                          global  asm_main
    54                                  asm_main:
    55 00000000 C8000000                        enter   0,0               ; setup routine
    56 00000004 60                              pusha
    57                                  
    58 00000005 B379                    	mov bl,'y'
    59                                  
    60                                  ; loop until user enters a value greater than 10
    61                                  do:
    62 00000007 B8[00000000]            	mov eax,prompt_string	; load address of the yes_string
    63 0000000C E8(00000000)            	call print_string	; print out the prompt
    64 00000011 B800000000              	mov eax,0		; clear eax
    65 00000016 E8(00000000)            	call read_char
    66 0000001B A2[00000000]            	mov [input],al
    67 00000020 E8(00000000)            	call read_char
    68 00000025 3A1D[00000000]          	cmp bl,[input]		; compare the values
    69 0000002B 74DA                    	jz do			; jump if [input] != ebx
    70                                  
    71                                  
    72 0000002D 61                              popa
    73 0000002E B800000000                      mov     eax, 0            ; return back to C
    74 00000033 C9                              leave                     
    75 00000034 C3                              ret
