     1                                  ;
     2                                  ; file: math.asm
     3                                  ; This program demonstrates how the integer multiplication and division
     4                                  ; instructions work.
     5                                  ;
     6                                  ; To create executable:
     7                                  ; nasm -f coff math.asm
     8                                  ; gcc -o math math.o driver.c asm_io.o
     9                                  
    10                                  %include "asm_io.inc"
    11                              <1> 	extern  read_int, print_int, print_string,print_hex
    12                              <1> 	extern	read_char, print_char, print_nl
    13                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    14                              <1> 
    15                              <1> %macro 	dump_regs 1
    16                              <1> 	push	  dword %1
    17                              <1> 	call	  sub_dump_regs
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> 
    21                              <1> ;
    22                              <1> ; usage: dump_mem label, start-address, # paragraphs
    23                              <1> %macro  dump_mem 3
    24                              <1> 	push	 dword %1
    25                              <1> 	push	 dword %2
    26                              <1> 	push	 dword %3
    27                              <1> 	call	 sub_dump_mem
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro	dump_math 1
    31                              <1> 	push	 dword %1
    32                              <1> 	call	 sub_dump_math
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> %macro  dump_stack 3
    36                              <1> 	push	 dword %3
    37                              <1>         push     dword %2
    38                              <1> 	push	 dword %1
    39                              <1>         call     sub_dump_stack
    40                              <1> %endmacro
    41                                  
    42                                  segment .data
    43                                  ;
    44                                  ; Output strings
    45                                  ;
    46                                  
    47 00000000 5965730A00              yes_string db    "Yes",10, 0
    48 00000005 4E6F0A00                no_string db    "No",10, 0
    49 00000009 456E640A00              end_string db    "End",10, 0
    50                                  
    51                                  segment .bss
    52 00000000 <res 00000004>          input   resd 1
    53                                  
    54                                  
    55                                  segment .text
    56                                          global  asm_main
    57                                  asm_main:
    58 00000000 C8000000                        enter   0,0               ; setup routine
    59 00000004 60                              pusha
    60                                  
    61                                  
    62                                  b1:
    63 00000005 B80A000000              	mov eax,10
    64 0000000A BB14000000              	mov ebx,20
    65                                  
    66                                  ; example of a do while loop
    67                                  do:
    68 0000000F 89C1                    	mov ecx,eax 		; save state of eax
    69 00000011 B8[00000000]            	mov eax,yes_string	; load address of the yes_string
    70 00000016 E8(00000000)            	call print_string	; print out Yes
    71 0000001B 89C8                    	mov eax,ecx		; restore eax
    72 0000001D 40                      	inc eax  		; increment eax by 1
    73 0000001E 39D8                    	cmp eax,ebx		; compare the values
    74 00000020 72ED                    	jb do			; jump if eax < ebx
    75                                  
    76 00000022 B8[09000000]            	mov eax,end_string
    77 00000027 E8(00000000)            	call print_string
    78                                  
    79 0000002C 61                              popa
    80 0000002D B800000000                      mov     eax, 0            ; return back to C
    81 00000032 C9                              leave                     
    82 00000033 C3                              ret
    83                                  
    84                                  
    85                                  
    86                                  
    87                                  
    88                                  
