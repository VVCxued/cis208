     1                                  ;
     2                                  ; file: math.asm
     3                                  ; This program demonstrates how the integer multiplication and division
     4                                  ; instructions work.
     5                                  ;
     6                                  ; To create executable:
     7                                  ; nasm -f coff math.asm
     8                                  ; gcc -o math math.o driver.c asm_io.o
     9                                  
    10                                  %include "asm_io.inc"
    11                              <1> 	extern  read_int, print_int, print_string,print_hex
    12                              <1> 	extern	read_char, print_char, print_nl
    13                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    14                              <1> 
    15                              <1> %macro 	dump_regs 1
    16                              <1> 	push	  dword %1
    17                              <1> 	call	  sub_dump_regs
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> 
    21                              <1> ;
    22                              <1> ; usage: dump_mem label, start-address, # paragraphs
    23                              <1> %macro  dump_mem 3
    24                              <1> 	push	 dword %1
    25                              <1> 	push	 dword %2
    26                              <1> 	push	 dword %3
    27                              <1> 	call	 sub_dump_mem
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro	dump_math 1
    31                              <1> 	push	 dword %1
    32                              <1> 	call	 sub_dump_math
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> %macro  dump_stack 3
    36                              <1> 	push	 dword %3
    37                              <1>         push     dword %2
    38                              <1> 	push	 dword %1
    39                              <1>         call     sub_dump_stack
    40                              <1> %endmacro
    41                                  
    42                                  segment .data
    43                                  ;
    44                                  ; Output strings
    45                                  ;
    46                                  
    47 00000000 5965730A00              yes_string db    "Yes",10, 0
    48 00000005 4E6F0A00                no_string db    "No",10, 0
    49 00000009 456E640A00              end_string db    "End",10, 0
    50 0000000E 456E7465722053636F-     prompt_string1 db    "Enter Score: ", 0
    51 00000017 72653A2000         
    52 0000001C 4100                    a: db "A",0
    53 0000001E 4200                    b: db "B",0
    54 00000020 4300                    c: db "C",0
    55 00000022 4400                    d: db "D",0
    56 00000024 4600                    f: db "F",0
    57 00000026 2F00                    slash: db "/",0
    58                                  
    59                                  segment .bss
    60 00000000 <res 00000004>          input   resd 1
    61                                  
    62                                  segment .text
    63                                          global  asm_main
    64                                  asm_main:
    65 00000000 C8000000                        enter   0,0               ; setup routine
    66 00000004 60                              pusha
    67 00000005 B800000000              	mov eax,0
    68 0000000A BB00000000              	mov ebx,0
    69 0000000F B905000000              	mov ecx,5
    70                                  loop_start:
    71 00000014 B8[0E000000]                    mov eax,prompt_string1	  ; move address of prompt to eax
    72 00000019 B8[00000000]            	mov eax,input         	  ; assign address for the input 
    73 0000001E E8(00000000)            	call read_int
    74                                  isA:	
    75 00000023 83F85A                  	cmp eax,90		  ; check if an A
    76 00000026 7213                    	jb isB
    77 00000028 01C3                    	add ebx,eax
    78 0000002A B8[1C000000]            	mov eax,a
    79 0000002F E8(00000000)            	call print_string
    80 00000034 E8(00000000)            	call print_nl
    81 00000039 EB5B                    	jmp endif
    82 0000003B 83F850                  isB:    cmp eax,80
    83 0000003E 7213                    	jb isC
    84 00000040 01C3                    	add ebx,eax
    85 00000042 B8[1E000000]            	mov eax,b
    86 00000047 E8(00000000)            	call print_string
    87 0000004C E8(00000000)            	call print_nl
    88 00000051 EB43                    	jmp endif
    89 00000053 83F846                  isC:    cmp eax,70
    90 00000056 7213                    	jb isD
    91 00000058 01C3                    	add ebx,eax
    92 0000005A B8[20000000]            	mov eax,c
    93 0000005F E8(00000000)            	call print_string
    94 00000064 E8(00000000)            	call print_nl
    95 00000069 EB2B                    	jmp endif
    96 0000006B 83F83C                  isD:    cmp eax,60
    97 0000006E 7213                    	jb isF
    98 00000070 01C3                    	add ebx,eax
    99 00000072 B8[22000000]            	mov eax,d
   100 00000077 E8(00000000)            	call print_string
   101 0000007C E8(00000000)            	call print_nl
   102 00000081 EB13                    	jmp endif
   103                                  isF:
   104 00000083 01C3                    	add ebx,eax
   105 00000085 B8[24000000]            	mov eax,f
   106 0000008A E8(00000000)            	call print_string
   107 0000008F E8(00000000)            	call print_nl
   108 00000094 EB00                    	jmp endif
   109                                  endif:
   110 00000096 89D8                            mov eax,ebx	
   111 00000098 49                      	dec ecx
   112 00000099 0F8575FFFFFF            	jnz loop_start
   113                                  loop_end:
   114 0000009F 89D8                    	mov eax,ebx
   115 000000A1 99                      	cdq
   116 000000A2 B905000000              	mov ecx,5
   117 000000A7 F7F1                    	div ecx
   118 000000A9 E8(00000000)            	call print_int
   119 000000AE B8[26000000]            	mov eax,slash
   120 000000B3 E8(00000000)            	call print_string
   121 000000B8 89D0                    	mov eax,edx
   122 000000BA E8(00000000)            	call print_int
   123 000000BF E8(00000000)            	call print_nl
   124 000000C4 61                              popa
   125 000000C5 B800000000                      mov     eax, 0            ; return back to C
   126 000000CA C9                              leave                     
   127 000000CB C3                              ret
   128                                  
   129                                  
   130                                  
   131                                  
   132                                  
   133                                  
