     1                                  
     2                                  
     3                                  ;
     4                                  ; file: math.asm
     5                                  ; This program demonstrates how the integer multiplication and division
     6                                  ; instructions work.
     7                                  ;
     8                                  ; To create executable:
     9                                  ; nasm -f coff math.asm
    10                                  ; gcc -o math math.o driver.c asm_io.o
    11                                  
    12                                  %include "asm_io.inc"
    13                              <1> 	extern  read_int, print_int, print_string,print_hex
    14                              <1> 	extern	read_char, print_char, print_nl
    15                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    16                              <1> 
    17                              <1> %macro 	dump_regs 1
    18                              <1> 	push	  dword %1
    19                              <1> 	call	  sub_dump_regs
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> 
    23                              <1> ;
    24                              <1> ; usage: dump_mem label, start-address, # paragraphs
    25                              <1> %macro  dump_mem 3
    26                              <1> 	push	 dword %1
    27                              <1> 	push	 dword %2
    28                              <1> 	push	 dword %3
    29                              <1> 	call	 sub_dump_mem
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro	dump_math 1
    33                              <1> 	push	 dword %1
    34                              <1> 	call	 sub_dump_math
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> %macro  dump_stack 3
    38                              <1> 	push	 dword %3
    39                              <1>         push     dword %2
    40                              <1> 	push	 dword %1
    41                              <1>         call     sub_dump_stack
    42                              <1> %endmacro
    43                                  
    44                                  segment .data
    45                                  ;
    46                                  ; Output strings
    47                                  ;
    48 00000000 456E7465722061206E-     prompt          db    "Enter a number: ", 0
    49 00000009 756D6265723A2000   
    50 00000011 537175617265206F66-     square_msg      db    "Square of input is ", 0
    51 0000001A 20696E707574206973-
    52 00000023 2000               
    53 00000025 43756265206F662069-     cube_msg        db    "Cube of input is ", 0
    54 0000002E 6E7075742069732000 
    55 00000037 43756265206F662069-     cube25_msg      db    "Cube of input times 25 is ", 0
    56 00000040 6E7075742074696D65-
    57 00000049 732032352069732000 
    58 00000052 51756F7469656E7420-     quot_msg        db    "Quotient of cube/100 is ", 0
    59 0000005B 6F6620637562652F31-
    60 00000064 30302069732000     
    61 0000006B 52656D61696E646572-     rem_msg         db    "Remainder of cube/100 is ", 0
    62 00000074 206F6620637562652F-
    63 0000007D 3130302069732000   
    64 00000085 546865206E65676174-     neg_msg         db    "The negation of the remainder is ", 0
    65 0000008E 696F6E206F66207468-
    66 00000097 652072656D61696E64-
    67 000000A0 65722069732000     
    68                                  
    69                                  segment .bss
    70 00000000 <res 00000004>          input   resd 1
    71                                  
    72                                  
    73                                  segment .text
    74                                          global  asm_main
    75                                  asm_main:
    76 00000000 C8000000                        enter   0,0               ; setup routine
    77 00000004 60                              pusha
    78                                  
    79 00000005 B8[00000000]                    mov     eax, prompt
    80 0000000A E8(00000000)                    call    print_string
    81                                  
    82 0000000F E8(00000000)                    call    read_int
    83 00000014 A3[00000000]                    mov     [input], eax
    84                                  b1:
    85 00000019 F7E8                            imul     eax               ; edx:eax = eax * eax
    86                                  b2:
    87 0000001B 89C3                            mov     ebx, eax          ; save answer in ebx
    88 0000001D B8[11000000]                    mov     eax, square_msg
    89 00000022 E8(00000000)                    call    print_string
    90 00000027 89D8                            mov     eax, ebx
    91 00000029 E8(00000000)                    call    print_int
    92 0000002E E8(00000000)                    call    print_nl
    93                                  
    94 00000033 89C3                            mov     ebx, eax
    95 00000035 0FAF1D[00000000]                imul    ebx, [input]      ; ebx *= [input]
    96 0000003C B8[25000000]                    mov     eax, cube_msg
    97 00000041 E8(00000000)                    call    print_string
    98 00000046 89D8                            mov     eax, ebx
    99 00000048 E8(00000000)                    call    print_int
   100 0000004D E8(00000000)                    call    print_nl
   101                                  
   102 00000052 6BCB19                          imul    ecx, ebx, 25      ; ecx = ebx*25
   103 00000055 B8[37000000]                    mov     eax, cube25_msg
   104 0000005A E8(00000000)                    call    print_string
   105 0000005F 89C8                            mov     eax, ecx
   106 00000061 E8(00000000)                    call    print_int
   107 00000066 E8(00000000)                    call    print_nl
   108                                  
   109 0000006B 89D8                            mov     eax, ebx
   110 0000006D 99                              cdq                       ; initialize edx by sign extension
   111                                  b5:
   112 0000006E B964000000                      mov     ecx, 100          ; can't divide by immediate value
   113 00000073 F7F9                            idiv    ecx               ; edx:eax / ecx
   114                                  b6:
   115 00000075 89C1                            mov     ecx, eax          ; save quotient into ecx
   116 00000077 B8[52000000]                    mov     eax, quot_msg
   117 0000007C E8(00000000)                    call    print_string
   118 00000081 89C8                            mov     eax, ecx
   119 00000083 E8(00000000)                    call    print_int
   120 00000088 E8(00000000)                    call    print_nl
   121 0000008D B8[6B000000]                    mov     eax, rem_msg
   122                                  b7:	
   123 00000092 E8(00000000)                    call    print_string
   124 00000097 89D0                            mov     eax, edx
   125 00000099 E8(00000000)                    call    print_int
   126 0000009E E8(00000000)                    call    print_nl
   127                                          
   128 000000A3 F7DA                            neg     edx               ; negate the remainder
   129 000000A5 B8[85000000]                    mov     eax, neg_msg
   130 000000AA E8(00000000)                    call    print_string
   131 000000AF 89D0                            mov     eax, edx
   132 000000B1 E8(00000000)                    call    print_int
   133 000000B6 E8(00000000)                    call    print_nl
   134                                  
   135 000000BB 61                              popa
   136 000000BC B800000000                      mov     eax, 0            ; return back to C
   137 000000C1 C9                              leave                     
   138 000000C2 C3                              ret
   139                                  
   140                                  
   141                                  
   142                                  
   143                                  
   144                                  
