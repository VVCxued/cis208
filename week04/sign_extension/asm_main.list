     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  ;
     4                                  ; To create executable:
     5                                  ; nasm -f coff math.asm
     6                                  ; gcc -o math math.o driver.c asm_io.o
     7                                  
     8                                  %include "asm_io.inc"
     9                              <1> 	extern  read_int, print_int, print_string,print_hex
    10                              <1> 	extern	read_char, print_char, print_nl
    11                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    12                              <1> 
    13                              <1> %macro 	dump_regs 1
    14                              <1> 	push	  dword %1
    15                              <1> 	call	  sub_dump_regs
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> 
    19                              <1> ;
    20                              <1> ; usage: dump_mem label, start-address, # paragraphs
    21                              <1> %macro  dump_mem 3
    22                              <1> 	push	 dword %1
    23                              <1> 	push	 dword %2
    24                              <1> 	push	 dword %3
    25                              <1> 	call	 sub_dump_mem
    26                              <1> %endmacro
    27                              <1> 
    28                              <1> %macro	dump_math 1
    29                              <1> 	push	 dword %1
    30                              <1> 	call	 sub_dump_math
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  dump_stack 3
    34                              <1> 	push	 dword %3
    35                              <1>         push     dword %2
    36                              <1> 	push	 dword %1
    37                              <1>         call     sub_dump_stack
    38                              <1> %endmacro
    39                                  
    40                                  segment .data
    41                                  ;
    42                                  ; Output strings
    43                                  ;
    44 00000000 456E7465722061206E-     prompt          db    "Enter a number: ", 0
    45 00000009 756D6265723A2000   
    46                                  
    47                                  segment .bss
    48 00000000 <res 00000004>          input   resd 1
    49                                  
    50                                  
    51                                  segment .text
    52                                          global  asm_main
    53                                  asm_main:
    54 00000000 C8000000                        enter   0,0               ; setup routine
    55 00000004 60                              pusha
    56                                  
    57 00000005 B8[00000000]                    mov     eax, prompt
    58 0000000A E8(00000000)                    call    print_string
    59                                  
    60 0000000F E8(00000000)                    call    read_int
    61 00000014 A2[00000000]                    mov     [input], al
    62                                  
    63 00000019 A1[00000000]                    mov     eax,[input]
    64 0000001E E8(00000000)                    call    print_int
    65 00000023 E8(00000000)            	call	print_nl
    66                                  
    67 00000028 BA00000000              	mov     edx,0 	          ;clear out edx
    68 0000002D 6698                    	cbw			  ; ax sign-extend of al
    69                                  b1:
    70 0000002F 6699                    	cwd			  ; sign-extend ax int dx:ax
    71                                  b2:
    72 00000031 B0FF                    	mov al,0xff		  ; set ax to -1
    73 00000033 B4FE                    	mov ah,0xfe		  ; set ax to -1
    74                                  b3:
    75 00000035 0FB6C0                  	movzx eax,al
    76                                  b4:
    77 00000038 61                              popa
    78 00000039 B800000000                      mov     eax, 0            ; return back to C
    79 0000003E C9                              leave                     
    80 0000003F C3                              ret
    81                                  
    82                                  
    83                                  
    84                                  
    85                                  
    86                                  
