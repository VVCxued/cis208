     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  
     4                                  %include "asm_io.inc"
     5                              <1> 	extern  read_int, print_int, print_string
     6                              <1> 	extern	read_char, print_char, print_nl
     7                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     8                              <1> 
     9                              <1> %macro 	dump_regs 1
    10                              <1> 	push	  dword %1
    11                              <1> 	call	  sub_dump_regs
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> 
    15                              <1> ;
    16                              <1> ; usage: dump_mem label, start-address, # paragraphs
    17                              <1> %macro  dump_mem 3
    18                              <1> 	push	 dword %1
    19                              <1> 	push	 dword %2
    20                              <1> 	push	 dword %3
    21                              <1> 	call	 sub_dump_mem
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro	dump_math 1
    25                              <1> 	push	 dword %1
    26                              <1> 	call	 sub_dump_math
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro  dump_stack 3
    30                              <1> 	push	 dword %3
    31                              <1>         push     dword %2
    32                              <1> 	push	 dword %1
    33                              <1>         call     sub_dump_stack
    34                              <1> %endmacro
    35                                  ;
    36                                  ; initialized data is put in the .data segment
    37                                  ;
    38                                  segment .data
    39                                  
    40                                  
    41                                  ; uninitialized data is put in the .bss segment
    42                                  ;
    43                                  segment .bss
    44                                  
    45                                  ;
    46                                  ; code is put in the .text segment
    47                                  ;
    48                                  segment .text
    49                                          global  asm_main
    50                                  asm_main:
    51 00000000 C8000000                        enter   0,0               ; setup routine
    52 00000004 60                              pusha
    53                                  ; next print out result message as series of steps
    54                                  	dump_regs 1
    55 00000005 6A01                <1>  push dword %1
    56 00000007 E8(00000000)        <1>  call sub_dump_regs
    57 0000000C 6A0A                    	push  dword 10
    58 0000000E 6A14                    	push  dword 20
    59 00000010 6A1E                    	push  dword 30
    60                                  	dump_regs 2
    61 00000012 6A02                <1>  push dword %1
    62 00000014 E8(00000000)        <1>  call sub_dump_regs
    63                                  
    64 00000019 58                      	pop   eax
    65 0000001A 5B                      	pop   ebx
    66 0000001B 5A                      	pop   edx
    67                                  	
    68                                  	dump_regs 3
    69 0000001C 6A03                <1>  push dword %1
    70 0000001E E8(00000000)        <1>  call sub_dump_regs
    71 00000023 B9[3A000000]            	mov   ecx,$ + 23 
    72 00000028 FFE1                    	jmp   ecx
    73 0000002A BB[2A000000]            	mov   ebx,$
    74 0000002F BB[2F000000]            	mov   ebx,$
    75                                  
    76 00000034 B80F000000              	mov   eax,0xf
    77 00000039 E8(00000000)            	call  print_int
    78 0000003E E8(00000000)            	call  print_nl
    79                                  
    80 00000043 61                              popa
    81 00000044 B800000000                      mov     eax, 0            ; return back to C
    82 00000049 C9                              leave                     
    83 0000004A C3                              ret
    84                                  
    85                                  
