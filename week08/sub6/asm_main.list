     1                                  
     2                                  
     3                                  ;
     4                                  ; file: sub6.asm
     5                                  ; Subprogram to C interfacing example
     6                                  
     7                                  ; subroutine calc_sum
     8                                  ; finds the sum of the integers 1 through n
     9                                  ; Parameters:
    10                                  ;   n    - what to sum up to (at [ebp + 8])
    11                                  ; Return value:
    12                                  ;   value of sum
    13                                  ; pseudo C code:
    14                                  ; int calc_sum( int n )
    15                                  ; {
    16                                  ;   int i, sum = 0;
    17                                  ;   for( i=1; i <= n; i++ )
    18                                  ;     sum += i;
    19                                  ;   return sum;
    20                                  ; }
    21                                  ;
    22                                  ; To assemble:
    23                                  ; DJGPP:   nasm -f coff sub6.asm
    24                                  ; Borland: nasm -f obj  sub6.asm
    25                                  
    26                                  segment .text
    27                                          global  calc_sum
    28                                  ;
    29                                  ; local variable:
    30                                  ;   sum at [ebp-4]
    31                                  calc_sum:
    32 00000000 C8040000                        enter   4,0               ; make room for sum on stack
    33                                  
    34 00000004 C745FC00000000                  mov     dword [ebp-4],0   ; sum = 0
    35 0000000B B901000000                      mov     ecx, 1            ; ecx is i in pseudocode
    36                                  for_loop:
    37 00000010 3B4D08                          cmp     ecx, [ebp+8]      ; cmp i and n
    38 00000013 7F06                            jnle    end_for           ; if not i <= n, quit
    39                                  
    40 00000015 014DFC                          add     [ebp-4], ecx      ; sum += i
    41 00000018 41                              inc     ecx
    42 00000019 EBF5                            jmp     short for_loop
    43                                  
    44                                  end_for:
    45 0000001B 8B45FC                          mov     eax, [ebp-4]      ; eax = sum
    46                                  
    47 0000001E C9                              leave
    48 0000001F C3                              ret
    49                                  
    50                                  
    51                                  
    52                                  
