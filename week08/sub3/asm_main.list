     1                                  
     2                                  
     3                                  ;
     4                                  ; file: sub3.asm
     5                                  ; Subprogram example program
     6                                  ;
     7                                  ; To create executable:
     8                                  ; Using djgpp:
     9                                  ; nasm -f coff sub3.asm
    10                                  ; gcc -o sub1 sub3.o driver.c asm_io.o
    11                                  ;
    12                                  ; Using Borland C/C++
    13                                  ; nasm -f obj sub3.asm
    14                                  ; bcc32 sub3.obj driver.c asm_io.obj
    15                                  
    16                                  %include "asm_io.inc"
    17                              <1> 	extern  read_int, print_int, print_string
    18                              <1> 	extern	read_char, print_char, print_nl
    19                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    20                              <1> 
    21                              <1> %macro 	dump_regs 1
    22                              <1> 	push	  dword %1
    23                              <1> 	call	  sub_dump_regs
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> 
    27                              <1> ;
    28                              <1> ; usage: dump_mem label, start-address, # paragraphs
    29                              <1> %macro  dump_mem 3
    30                              <1> 	push	 dword %1
    31                              <1> 	push	 dword %2
    32                              <1> 	push	 dword %3
    33                              <1> 	call	 sub_dump_mem
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro	dump_math 1
    37                              <1> 	push	 dword %1
    38                              <1> 	call	 sub_dump_math
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> %macro  dump_stack 3
    42                              <1> 	push	 dword %3
    43                              <1>         push     dword %2
    44                              <1> 	push	 dword %1
    45                              <1>         call     sub_dump_stack
    46                              <1> %endmacro
    47                                  
    48                                  segment .data
    49 00000000 00000000                sum     dd   0
    50                                  
    51                                  segment .bss
    52 00000000 <res 00000004>          input   resd 1
    53                                  
    54                                   
    55                                  
    56                                  ;
    57                                  ; psuedo-code algorithm
    58                                  ; i = 1;
    59                                  ; sum = 0;
    60                                  ; while( get_int(i, &input), input != 0 ) {
    61                                  ;   sum += input;
    62                                  ;   i++;
    63                                  ; }
    64                                  ; print_sum(num);
    65                                  
    66                                  segment .text
    67                                          global  asm_main
    68                                  asm_main:
    69 00000000 C8000000                        enter   0,0               ; setup routine
    70 00000004 60                              pusha
    71                                  
    72 00000005 BA01000000                      mov     edx, 1            ; edx is 'i' in pseudo-code
    73                                  while_loop:
    74 0000000A 52                              push    edx               ; save i on stack
    75 0000000B 68[00000000]                    push    dword input       ; push address on input on stack
    76 00000010 E825000000                      call    get_int
    77 00000015 83C408                          add     esp, 8            ; remove i and &input from stack
    78                                  
    79 00000018 A1[00000000]                    mov     eax, [input]
    80 0000001D 83F800                          cmp     eax, 0
    81 00000020 7409                            je      end_while
    82                                  
    83 00000022 0105[00000000]                  add     [sum], eax        ; sum += input
    84                                  
    85 00000028 42                              inc     edx
    86 00000029 EBDF                            jmp     short while_loop
    87                                  
    88                                  end_while:
    89 0000002B FF35[00000000]                  push    dword [sum]       ; push value of sum onto stack
    90 00000031 E825000000                      call    print_sum
    91 00000036 59                              pop     ecx               ; remove [sum] from stack
    92                                  
    93 00000037 61                              popa
    94 00000038 C9                              leave                     
    95 00000039 C3                              ret
    96                                  
    97                                  ;
    98                                  ; subprogram get_int
    99                                  ; Parameters (in order pushed on stack)
   100                                  ;   number of input (at [ebp + 12])
   101                                  ;   address of word to store input into (at [ebp + 8])
   102                                  ; Notes:
   103                                  ;   values of eax and ebx are destroyed
   104                                  segment .data
   105 00000004 2920456E7465722061-     prompt  db      ") Enter an integer number (0 to quit): ", 0
   106 0000000D 6E20696E7465676572-
   107 00000016 206E756D6265722028-
   108 0000001F 3020746F2071756974-
   109 00000028 293A2000           
   110                                  
   111                                  segment .text
   112                                  get_int:
   113 0000003A 55                              push    ebp
   114 0000003B 89E5                            mov     ebp, esp
   115                                  
   116 0000003D 8B450C                          mov     eax, [ebp + 12]
   117 00000040 E8(00000000)                    call    print_int
   118                                  
   119 00000045 B8[04000000]                    mov     eax, prompt
   120 0000004A E8(00000000)                    call    print_string
   121                                          
   122 0000004F E8(00000000)                    call    read_int
   123 00000054 8B5D08                          mov     ebx, [ebp + 8]
   124 00000057 8903                            mov     [ebx], eax         ; store input into memory
   125                                  
   126 00000059 5D                              pop     ebp
   127 0000005A C3                              ret                        ; jump back to caller
   128                                  
   129                                  ; subprogram print_sum
   130                                  ; prints out the sum
   131                                  ; Parameter:
   132                                  ;   sum to print out (at [ebp+8])
   133                                  ; Note: destroys value of eax
   134                                  ;
   135                                  segment .data
   136 0000002C 5468652073756D2069-     result  db      "The sum is ", 0
   137 00000035 732000             
   138                                  
   139                                  segment .text
   140                                  print_sum:
   141 0000005B 55                              push    ebp
   142 0000005C 89E5                            mov     ebp, esp
   143                                  
   144 0000005E B8[2C000000]                    mov     eax, result
   145 00000063 E8(00000000)                    call    print_string
   146                                  
   147 00000068 8B4508                          mov     eax, [ebp+8]
   148 0000006B E8(00000000)                    call    print_int
   149 00000070 E8(00000000)                    call    print_nl
   150                                  
   151 00000075 5D                              pop     ebp
   152 00000076 C3                              ret
   153                                  
   154                                  
   155                                  
   156                                  
   157                                  
   158                                  
